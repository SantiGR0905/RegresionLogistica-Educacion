import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

# Cargar los datos desde un archivo CSV o similar
data = pd.read_csv('student_grades.csv')

# Explorar el conjunto de datos
print(data.head())
print(data.info())
print(data.describe())
print(data.columns)

# Separar las variables independientes (X) y la dependiente (Y)
x = data[['MathScore', 'ReadingScore', 'WritingScore', 'Absences']]
y = data['Absences']

# Dividir el dataset en conjunto de entrenamiento y prueba (80% entrenamiento, 20%prueba)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Estandarizar los datos (opcional pero recomendable para regresión logística)
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

# Crear el modelo de Regresión Logística
logistic_model = LogisticRegression()

# Entrenar el modelo
logistic_model.fit(x_train_scaled, y_train)

# Realizar predicciones con el conjunto de prueba
y_pred = logistic_model.predict(x_test_scaled)

# Crear la matriz de canfusión
conf_matrix = confusion_matrix(y_test, y_pred)

# Visualizar la matriz de confusión
plt.figure(figsize=(8,6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Imprimir el reporte de clasificación
print(classification_report(y_test, y_pred))

# Imprimir la exactitud del modelo
accuracy = accuracy_score(y_test, y_pred)
print(f'Exactitud del modelo: {accuracy * 100:.2f}%')
